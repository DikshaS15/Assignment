# Functions

-- Basic Aggregate Functions:

Use sakila;

/*
Question 1:
Retrieve the total number of rentals made in the Sakila database.
Hint: Use the COUNT() function.
*/

SELECT COUNT(*) AS total_rentals
FROM rental;


/*
Question 2:
Find the average rental duration (in days) of movies rented from the Sakila database.
Hint: Utilize the AVG() function.
*/

SELECT AVG(rental_duration) AS average_rental_duration
FROM film;


-- String Functions:

/*
Question 3:
Display the first name and last name of customers in uppercase.
Hint: Use the UPPER () function.
*/

SELECT UPPER(first_name) AS "First Name", UPPER(last_name) AS "Last Name"
FROM customer;


/*
Question 4:
Extract the month from the rental date and display it alongside the rental ID.
Hint: Employ the MONTH() function.
*/

SELECT rental_id, MONTH(rental_date) AS rental_month
FROM rental;


-- GROUP BY:

/*
Question 5:
Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
Hint: Use COUNT () in conjunction with GROUP BY.
*/

SELECT customer_id, COUNT(rental_id) AS rental_count
FROM rental
GROUP BY customer_id;


/*
Question 6:
Find the total revenue generated by each store.
Hint: Combine SUM() and GROUP BY.
*/

SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM payment AS p
JOIN rental AS r ON p.rental_id = r.rental_id
JOIN customer AS c ON r.customer_id = c.customer_id
JOIN store AS s ON c.store_id = s.store_id
GROUP BY s.store_id;


/*
Question 7:
Determine the total number of rentals for each category of movies.
Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.
*/

SELECT c.name AS category_name, COUNT(r.rental_id) AS rental_count
FROM category AS c
JOIN film_category AS fc ON c.category_id = fc.category_id
JOIN film AS f ON fc.film_id = f.film_id
JOIN inventory AS i ON f.film_id = i.film_id
JOIN rental AS r ON i.inventory_id = r.inventory_id
GROUP BY c.name;


/*
Question 8:
Find the average rental rate of movies in each language.
Hint: JOIN film and language tables, then use AVG () and GROUP BY.
*/

SELECT l.name AS language_name, AVG(f.rental_rate) AS average_rental_rate
FROM film AS f
JOIN language AS l ON f.language_id = l.language_id
GROUP BY l.name;


-- Joins

/*
Questions 9 -
Display the title of the movie, customer s first name, and last name who rented it.
Hint: Use JOIN between the film, inventory, rental, and customer tables.
*/

SELECT f.title, c.first_name, c.last_name
FROM film AS f
JOIN inventory AS i ON f.film_id = i.film_id
JOIN rental AS r ON i.inventory_id = r.inventory_id
JOIN customer AS c ON r.customer_id = c.customer_id;


/*
Question 10:
Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
Hint: Use JOIN between the film actor, film, and actor tables.
*/

SELECT a.first_name, a.last_name
FROM actor AS a
JOIN film_actor AS fa ON a.actor_id = fa.actor_id
JOIN film AS f ON fa.film_id = f.film_id
WHERE f.title = "Gone with the Wind";


/*
Question 11:
Retrieve the customer names along with the total amount they've spent on rentals.
Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.
*/

SELECT c.first_name, c.last_name, SUM(p.amount) AS total_spent
FROM customer AS c
JOIN rental AS r ON c.customer_id = r.customer_id
JOIN payment AS p ON r.rental_id = p.rental_id
GROUP BY c.customer_id, c.first_name, c.last_name;


/*
Question 12:
List the titles of movies rented by each customer in a particular city (e.g., 'London').
Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.
*/

SELECT c.first_name, c.last_name, f.title
FROM customer AS c
JOIN address AS a ON c.address_id = a.address_id
JOIN city AS ci ON a.city_id = ci.city_id
JOIN rental AS r ON c.customer_id = r.customer_id
JOIN inventory AS i ON r.inventory_id = i.inventory_id
JOIN film AS f ON i.film_id = f.film_id
WHERE ci.city = 'London'
ORDER BY c.last_name, c.first_name, f.title;


--- Advanced Joins and GROUP BY:

/*
Question 13:
Display the top 5 rented movies along with the number of times they've been rented.
Hint: JOIN film, inventory, and rental tables, then use COUNT () and GROUP BY, and limit the results.
*/

SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 5;


/*
Question 14:
Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.
*/

SELECT c.customer_id, c.first_name, c.last_name
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
WHERE i.store_id IN (1, 2)
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING COUNT(DISTINCT i.store_id) = 2;



-- Windows Function:

/*
1. Rank the customers based on the total amount they've spent on rentals.
*/

SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(p.amount) DESC) AS customer_rank
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC;


/*
2. Calculate the cumulative revenue generated by each film over time.
*/

SELECT
    f.title,
    DATE(r.rental_date) AS rental_date,  -- Extract date part for daily cumulative
    SUM(p.amount) OVER (PARTITION BY f.title ORDER BY DATE(r.rental_date)) AS cumulative_revenue
FROM
    film f
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
JOIN
    payment p ON r.rental_id = p.rental_id  -- Join with payment to get revenue
ORDER BY
    f.title, rental_date;
    
    
/*
3. Determine the average rental duration for each film, considering films with similar lengths.
*/

SELECT 
    film.length AS film_length,
    AVG(datediff(rental.return_date,rental.rental_date)) AS avg_rental_duration
FROM 
    film
JOIN 
    inventory ON film.film_id = inventory.film_id
JOIN 
    rental ON inventory.inventory_id = rental.inventory_id
GROUP BY 
    film.length
ORDER BY 
    film_length;
  
/*
4. Identify the top 3 films in each category based on their rental counts.
*/

WITH FilmRentalCounts AS (
    SELECT
        c.name AS category_name,
        f.title AS film_title,
        COUNT(r.rental_id) AS rental_count,
        ROW_NUMBER() OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id) DESC) AS film_rank
    FROM
        film f
    JOIN
        film_category fc ON f.film_id = fc.film_id
    JOIN
        category c ON fc.category_id = c.category_id
    JOIN
        inventory i ON f.film_id = i.film_id
    JOIN
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        c.name, f.title
)
SELECT
    category_name,
    film_title,
    rental_count
FROM
    FilmRentalCounts
WHERE
    film_rank <= 3
ORDER BY
    category_name, rental_count DESC;
    
    
/*
5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
*/

WITH CustomerRentalCounts AS (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        COUNT(r.rental_id) AS total_rentals
    FROM
        customer c
    JOIN
        rental r ON c.customer_id = r.customer_id
    GROUP BY
        c.customer_id, c.first_name, c.last_name
),
AverageRentalCount AS (
    SELECT AVG(total_rentals) AS avg_rentals
    FROM CustomerRentalCounts
)
SELECT
    crc.customer_id,
    crc.first_name,
    crc.last_name,
    crc.total_rentals,
    arc.avg_rentals,
    (crc.total_rentals - arc.avg_rentals) AS rental_difference
FROM
    CustomerRentalCounts crc,
    AverageRentalCount arc
ORDER BY
    rental_difference DESC; -- Order by difference (optional)
    
    
/*
6. Find the monthly revenue trend for the entire rental store over time.
*/

SELECT
    DATE_TRUN('month', r.rental_date) AS rental_month,  -- Extract month and year
    SUM(p.amount) AS monthly_revenue
FROM
    rental r
JOIN
    payment p ON r.rental_id = p.rental_id
GROUP BY
    rental_month
ORDER BY
    rental_month;
    
    
-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**

select first_name , sum(payment.amount) as amount   from customer join payment on customer.customer_id = payment.customer_id 
 where amount < (select 0.2*sum(amount) as total_spending from payment) group by first_name ;


-- 8. ** Calculate the running total of rentals per category, ordered by rental count.**

SELECT
    c.name AS category_name,
    COUNT(r.rental_id) AS rental_count,
    SUM(COUNT(r.rental_id)) OVER (ORDER BY COUNT(r.rental_id) DESC) AS running_total
FROM
    category c
JOIN
    film_category fc ON c.category_id = fc.category_id
JOIN
    film f ON fc.film_id = f.film_id
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY
    c.name
ORDER BY
    rental_count DESC;
    
-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**

SELECT 
    film_text.title AS title, SUM(payment.amount) AS amount
FROM
    film_text
        JOIN
    inventory ON film_text.film_id = inventory.film_id
        JOIN
    rental ON inventory.inventory_id = rental.inventory_id
        JOIN
    payment ON rental.rental_id = payment.rental_id
WHERE
    amount < (SELECT 
            AVG(rental_rate)
        FROM
            film)
GROUP BY title;


-- 10. ** Identify the top 5 months with the highest revenue and display the revenue generated in each month.**

select months,amount 
from (select sum(amount) 
over (partition by month(payment_date) 
order by month(payment_date)) as amount ,
month(payment_date) as months  from payment order by amount desc ) as details group by months,amount ;